# -*- coding: utf-8 -*-
"""Tugas Pekan 4 - NLP - Word2Vec

Automatically generated by Colaboratory.

Original file is located at
	https://colab.research.google.com/drive/1Gqoo4ff3S2tNOoherFYI097GSy7FnxZ4

# **Semantik Vektor II : Word2Vec**
Topik : Politik, Ekonomi, Teknologi

> Sumber : www.jawapos.com
---
Clarisa Hasya Y - 1301174256
"""

from glob import glob
import random
import matplotlib.pyplot as plt

# Import library untuk menampilkan pesan log proses
import logging
logging.basicConfig(format='%(asctime)s : %(levelname)s : %(message)s', level=logging.INFO)
# Import library gensim
from gensim import utils
# Import package untuk membangun model
import gensim.models
# inital reduction
from sklearn.decomposition import IncrementalPCA    
# final reduction
from sklearn.manifold import TSNE                   
# array handling
import numpy as np

class MyCorpus(object): 
	"""An interator that yields sentences (lists of str)."""
	def __iter__(self):
		list_of_files = glob('dataset/Full dataset-*.txt')
		for file_name in list_of_files:
			for line in open(file_name, 'r', encoding='utf-8'):
				# assume there's one document per line, tokens separated by whitespace
				# asumsi 1 dokumen adalah 1 kalimat, dituliskan per baris. Antar token dipisahkan dengan spasi
				yield utils.simple_preprocess(line)

sentences = MyCorpus()
model1 = gensim.models.Word2Vec(sentences=sentences, min_count=1)
model5 = gensim.models.Word2Vec(sentences=sentences, min_count=5)

"""**Akses representasi vektor/embedding sebuah kata**

Model 1 (min_count = 1)
"""
print('===============================================================================================')

vec_positif1 = model1.wv['teknologi']
print('Akses representasi vektor/embedding kata teknologi pada model 1 (min_count = 1)')
print(vec_positif1)

print('-----------------------------------------------------------------------------------------------')

"""Model 2 (min_count = 5)"""

vec_positif5 = model5.wv['teknologi']
print('Akses representasi vektor/embedding kata teknologi pada model 2 (min_count = 5)')
print(vec_positif5)

print('===============================================================================================')

"""**Similarity Model 1 (min_count = 1)**

Similarity > 0,5
"""
print('Similarity Model 1 (min_count = 1)')
print('-----------------------------------------------------------------------------------------------')
print('Similarity > 0,5')
print('Similarity kata pemerintah & politik : ', model1.wv.similarity('pemerintah', 'politik'))
print('-----------------------------------------------------------------------------------------------')
"""0 < Similarity < 0,5"""
print('0 < Similarity < 0,5')
print('Similarity kata mengatur & harga : ', model1.wv.similarity('mengatur', 'harga'))
print('Similarity kata teknologi & telkomsel : ',model1.wv.similarity('teknologi', 'telkomsel'))
print('-----------------------------------------------------------------------------------------------')
"""-1 < Similarity < -0,5"""
print('-1 < Similarity < -0,5')
print('Similarity kata mengoptimalkan & news : ', model1.wv.similarity('mengoptimalkan', 'news'))
print('Similarity kata memanfaatkan & singapura : ', model1.wv.similarity('memanfaatkan', 'singapura'))

print('===============================================================================================')

"""**Similarity Model 2 (min_count = 5)**

Similarity > 0,5
"""
print('Similarity Model 2 (min_count = 5)')
print('-----------------------------------------------------------------------------------------------')
print('Similarity > 0,5')
print('Similarity kata pembangunan & kerja : ', model5.wv.similarity('pembangunan', 'kerja'))
print('Similarity kata pemerintah & politik : ', model5.wv.similarity('pemerintah', 'politik'))
print('-----------------------------------------------------------------------------------------------')
"""0 < Similarity < 0,5"""
print('0 < Similarity < 0,5')
print('Similarity kata teknologi & telkomsel : ',model5.wv.similarity('teknologi', 'telkomsel'))
# print('Similarity kata mengatur & harga : ', model5.wv.similarity('digitalisasi', 'harga'))
print('-----------------------------------------------------------------------------------------------')
"""-1 < Similarity < -0,5"""
print('-1 < Similarity < -0,5')
print('Similarity kata memanfaatkan & singapura : ', model5.wv.similarity('memanfaatkan', 'singapura'))
# print('Similarity kata mengoptimalkan & news : ', model5.wv.similarity('mengoptimalkan', 'news'))

print('===============================================================================================')

"""**Top-5 kata yang similar dengan sebuah kata tertentu**

Model 1 (min_count = 1)
"""

print('Top 5 kata teknologi dengan sebuah kata tertentu pada model 1 (min_count = 1)')
print(model1.wv.most_similar(positive=['teknologi'], topn=5))

print('-----------------------------------------------------------------------------------------------')

"""Model 2 (min_count = 5)"""

print('Top 5 kata teknologi dengan sebuah kata tertentu pada model 2 (min_count = 5)')
print(model5.wv.most_similar(positive=['teknologi'], topn=5))

print('===============================================================================================')

"""**Reduksi dimensi**"""

# Fungsi untuk reduksi dimensi
def reduce_dimensions(model):
	num_dimensions = 2  # final num dimensions (2D, 3D, etc)

	vectors = [] # positions in vector space
	labels = [] # keep track of words to label our data again later
	for word in model.wv.vocab:
		vectors.append(model.wv[word])
		labels.append(word)

	# convert both lists into numpy vectors for reduction
	vectors = np.asarray(vectors)
	labels = np.asarray(labels)

	# reduce using t-SNE
	vectors = np.asarray(vectors)
	tsne = TSNE(n_components=num_dimensions, random_state=0)
	vectors = tsne.fit_transform(vectors)

	x_vals = [v[0] for v in vectors]
	y_vals = [v[1] for v in vectors]
	return x_vals, y_vals, labels

x_vals1, y_vals1, labels1 = reduce_dimensions(model1)
x_vals5, y_vals5, labels5 = reduce_dimensions(model5)

"""**Visualisasi embedding**"""

def plot_with_matplotlib(x_vals, y_vals, labels, title):
	random.seed(0)

	plt.figure(figsize=(12, 12))
	plt.scatter(x_vals, y_vals)

	# Label randomly subsampled 25 data points
	#
	indices = list(range(len(labels)))
	selected_indices = random.sample(indices, 25)
	for i in selected_indices:
		plt.annotate(labels[i], (x_vals[i], y_vals[i]))
	plt.title(title)
	plt.show()

"""Model 1 (min_count = 1)"""

plot_with_matplotlib(x_vals1, y_vals1, labels1, 'Model 1 (min_count = 1)')

"""Model 2 (min_count = 5)"""

plot_with_matplotlib(x_vals5, y_vals5, labels5, 'Model 2 (min_count = 5)')